cmake_minimum_required(VERSION 3.7)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
project(RiskTheSix)

#set(Boost_USE_STATIC_LIBS ON) 
#set(Boost_USE_MULTITHREADED ON)  
#set(Boost_USE_STATIC_RUNTIME OFF) 

list(APPEND CMAKE_PREFIX_PATH  "${CMAKE_SOURCE_DIR}/../vclib/")

find_package(SDL2 CONFIG REQUIRED)

find_package(SDL2_IMAGE CONFIG REQUIRED)  

find_package(SDL2_TTF CONFIG REQUIRED)
  
#find_package(Boost REQUIRED COMPONENTS filesystem) 

find_package(OpenGL REQUIRED)

 

message("SDL2_LIBRARIES: "  ${SDL2_LIBRARIES}) 
message("SDL2_INCLUDE: "  ${SDL2_INCLUDE_DIR})
message("SDL2_IMAGE_LIBRARIES: "  ${SDL2_IMAGE_LIBRARIES})
message("SDL2_IMAGE_INCLUDE: "  ${SDL2_IMAGE_INCLUDE_DIR}) 
message("SDL2_TTF_LIBRARIES: "  ${SDL2_TTF_LIBRARIES}) 
message("SDL2_TTF_INCLUDE: "  ${SDL2_TTF_INCLUDE_DIR})

#message("Boost Found: " ${Boost_FOUND}) 
#message("Boost_INCLUDE_DIR: " ${Boost_INCLUDE_DIRS})
#message("Boost_LIBRARY_DIRS: " ${Boost_LIBRARY_DIRS}) 
#message("Boost_LIBRARIES: " ${Boost_LIBRARIES})
  
#message("OpenGL Found" ${OPENGL_FOUND})
#message("OpenGL Libraries: " ${OPENGL_LIBRARIES})

#include_directories(${SDL2_INCLUDE_DIR} ${SDL2_IMAGE_INCLUDE_DIR} ${SDL2_TTF_INCLUDE_DIR} ${Boost_INCLUDE_DIRS})
include_directories(${SDL2_INCLUDE_DIR} ${SDL2_IMAGE_INCLUDE_DIR} ${SDL2_TTF_INCLUDE_DIR})
 
 ######### SXNGN
#include the SXNGN Sources (game engine)
file(GLOB_RECURSE SXNGN_SOURCES
	${CMAKE_SOURCE_DIR}/lib/SXNGN/headers/*.h
	${CMAKE_SOURCE_DIR}/lib/SXNGN/cpp/*.hpp
	${CMAKE_SOURCE_DIR}/lib/SXNGN/cpp/*.cpp
	)
	
message("SXNGN Sources: "  ${SXNGN_SOURCES})
include_directories(${CMAKE_SOURCE_DIR}/lib/SXNGN/headers)  


 ######### KISS (GUI)
 file(GLOB_RECURSE KISS_SOURCES
	${CMAKE_SOURCE_DIR}/lib/KISS/kiss_sdl/*.h
	${CMAKE_SOURCE_DIR}/lib/KISS/kiss_sdl/*.c 
	${CMAKE_SOURCE_DIR}/lib/KISS/kiss_sdl/*.cpp 
	)
	
message("KISS Sources: "  ${KISS_SOURCES}) 
include_directories(${CMAKE_SOURCE_DIR}/lib/KISS/kiss_sdl/)
 
######### Nanogui (GUI)
# Disable building extras we won't need (pure C++ project)
#set(NANOGUI_BUILD_EXAMPLE ON CACHE BOOL " " FORCE)
#set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
#set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
# you could add the NANOGUI_BUILD_SHARED part here

# Add the configurations from nanogui
#add_subdirectory(${CMAKE_SOURCE_DIR}/lib/nanogui-sdl)  # this executes ext/nanogui/CMakeLists.txt for you 

# Various preprocessor definitions have been generated by NanoGUI
#add_definitions(${NANOGUI_EXTRA_DEFS}) 

# On top of adding the path to nanogui/include, you may need extras
#include_directories(${CMAKE_SOURCE_DIR}/lib/nanogui-sdl) # make sure you have this

#file(GLOB_RECURSE NNGUI_SOURCES
#	${CMAKE_SOURCE_DIR}/lib/nanogui-sdl/sdlgui/*.h
#	${CMAKE_SOURCE_DIR}/lib/nanogui-sdl/sdlgui/*.cpp
#	)
#message("Nanogui Sources: "  ${NNGUI_SOURCES}) 
#message("Nanogui Extra Libs: "  ${NNGUI_LIBS}) 

######### End Nanogui

#include_directories(${CMAKE_SOURCE_DIR}/src/headers)
add_executable(LevelEditor "src/apps/LevelEditor.cpp" ${SXNGN_SOURCES} ${KISS_SOURCES}    "lib/SXNGN/headers/ECS/Core/Component.hpp" "lib/SXNGN/headers/ECS/Core/TextureManager.hpp")
target_link_libraries(LevelEditor ${SDL2_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_TTF_LIBRARIES})   

add_executable(HoplonSimulator "src/apps/HoplonSimulator.cpp" ${SXNGN_SOURCES} ${KISS_SOURCES}   "lib/SXNGN/headers/ECS/Core/Component.hpp" "lib/SXNGN/headers/ECS/Core/TextureManager.hpp")
target_link_libraries(HoplonSimulator ${SDL2_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_TTF_LIBRARIES}) 

add_executable(KissExample "src/apps/kiss_example1.cpp" ${SXNGN_SOURCES} ${KISS_SOURCES}         "lib/SXNGN/headers/ECS/Core/Component.hpp" "lib/SXNGN/headers/ECS/Core/TextureManager.hpp")
target_link_libraries(KissExample ${SDL2_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_TTF_LIBRARIES} )

add_executable(ECS_Demo "src/apps/ECS_Demo.cpp" ${SXNGN_SOURCES} ${KISS_SOURCES}  "lib/SXNGN/headers/ECS/Core/Component.hpp" "lib/SXNGN/headers/ECS/Core/TextureManager.hpp")
target_link_libraries(ECS_Demo ${SDL2_LIBRARIES} ${SDL2_IMAGE_LIBRARIES} ${SDL2_TTF_LIBRARIES} )

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})


#Copy DLLs to output
#add_custom_command(TARGET SDL2Test POST_BUILD        # Adds a post-build event to SDL2Test
#    COMMAND ${CMAKE_COMMAND} -E copy_if_different  # which executes "cmake - E copy_if_different..."
#        "${SDL2_LIBRARIES}../.dll)"      # <--this is in-file
#        $<CMAKE_BINARY_DIR:SDL2Test)                 # <--this is out-file path